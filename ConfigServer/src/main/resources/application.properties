spring.application.name=config-server
server.port=7001

#默认只公开了/health和/info端点,要想暴露所有端点只需设置成星号即可
#management.endpoints.web.exposure.include=*

#一、配置Git默认仓库位置(最后不需要带/,否则会出现:No custom http config found for URL: XXX)
spring.cloud.config.server.git.uri=https://github.com/PandaContainer/ConfigRepository
#uri支持{application}、{profile}和{label}占位符配置
#spring.cloud.config.server.git.uri=https://github.com/PandaContainer/{application}-config
#配置Git本地仓库,方便开发调试,uri必需以file:///开头
#spring.cloud.config.server.git.uri=file:///E:/git_repository/ConfigRepository
#二、配置多个仓库: pattern仅支持{application}/{profile}格式配置规则,支持通配符,多个规则可用,分隔
#当使用{application}/{profile}模式未能匹配到合适仓库时,就用git.uri配置的默认仓库!
#当配置多个仓库时,ConfigServer启动时直接克隆第一个仓库配置库,其他配置库只有在请求时才克隆到本地,仓库的排列可以根据配置重要程度有所区分
#dev仓库匹配application为dev,profile为任意字符的应用
spring.cloud.config.server.git.repos.dev.pattern=dev/*
spring.cloud.config.server.git.repos.dev.uri=file:///E:/git_repository/ConfigRepository
#test仓库只匹配application为test的应用
spring.cloud.config.server.git.repos.test=https://github.com/test/config-repo
#prod仓库匹配application为prod且profile为pp开头,或者application为online且profile为oo开头的应用
spring.cloud.config.server.git.repos.prod.pattern=prod/pp*,online/oo*
spring.cloud.config.server.git.repos.prod.uri=https://github.com/prod/config-repo

#三、GIT仓库地址下的相对搜索地址(可用使用通配符,如*?等),可以配置多个,用","分割,支持{application}、{profile}和{label}占位符配置
spring.cloud.config.server.git.searchPaths=SpringCloudInAction/*,{application}
#访问Git仓库用户名(公开仓库无需账号信息)
spring.cloud.config.server.git.username=
#访问Git仓库用户密码(公开仓库无需账号信息)
spring.cloud.config.server.git.password=
#GIT默认分支
spring.cloud.config.server.git.default-label=master

#四、使用SVN配置仓库
spring.cloud.config.server.svn.uri=https://localhost:443/ConfigRepository
spring.cloud.config.server.svn.username=
spring.cloud.config.server.svn.password=

#五、指定Git使用非本地仓库时克隆到本地仓库的路径(可以不存在),默认为config-repo-<随机数>临时目录,${random.int(10)}
spring.cloud.config.server.git.basedir=/E:/tmp/config-repo/git
#指定Svn配置下载到本地仓库的路径,默认为config-repo-<随机数>临时目录
#spring.cloud.config.server.svn.basedir=/E:/tmp/config-repo/svn

#六、使用本地文件系统(默认是git,可以设置subversion(SVN),native(本地))
#spring.profiles.active=native
#本地文件系统配置文件存放目录,默认为classpath:/src/main/resource,如果是文件系统必须使用file:///开头,且不支持多级目录查找
spring.cloud.config.server.native.searchLocations=classpath:/configs,file:///E:/tmp/local-filesystem-repo

#七、健康监测:配置需要健康检测的Git或Svn仓库连接信息,repositories可配置多个,name应用名(默认为app),label分支名,profile环境名
#uri必须使用{application}、{profile}和{label}占位符,通过/health端点可以查看多个被检测仓库健康情况
spring.cloud.config.server.health.repositories.check.name=check-repo
spring.cloud.config.server.health.repositories.check.label=master
spring.cloud.config.server.health.repositories.check.profiles=default
#禁用监控检查器
spring.cloud.config.server.health.enabled=false

#八、属性覆盖:通过overrides属性设置键值对参数,以Map的方式加载到客户端配置中
#客户端也可以配置更高优先级环境变量和系统属性,来选择是否使用ConfigServer提供的默认值
#对称加密
#spring.cloud.config.server.overrides.name={cipher}a4d2f9adc27a45edf2d294826ae57ab0ad5c347cb3d67a3268e760718cdf98da
#非对称加密
spring.cloud.config.server.overrides.name={cipher}AQB3GSsc0xU4KzGDeNteQAMOWTL3UAGh0OsFLGNDH1dkcVoBMACF06DE+rIeTJP6q9v8Zg/rfJ0DEaBr0RoWr1TifAMiqFUKTAWji7/IN7Qoj8BmcgGoXcIyCMnC5pg2CjTX4MzM0hoK9iVhpf67d8S4m1W/5P7rhWgTyutYLX5mkLGDtXnO1CoQZ1Cl0eS2yUtG3nzjSi7mh5COUTYzY05d/ZR0T1vqckiqm5SE8i6zi3/wUXdjG668xBAT8HbPtRPq5uOgXOIxeSiFJYcNtuCyElmURzF7YH3VCL5RxXTmeeJLI/FUnrf3fihQPICjI8qGGGDYVCaHkRB5hZdJrbfzPPU7bIRd4vMu7l+CcAAuseIm7JaDts+kFm0w8CZIi+Y=
#spring.cloud.config.server.overrides.from=shanghai(服务端使用了overrides属性)

#九、安全保护:引入Security依赖来提供权限认证,config客户端也需要配置权限信息
spring.security.user.name=user
spring.security.user.password=fef54a97-2bc5-4ea7-9083-3137f96a1f4e

#十、加密解密:属性值前使用{cipher}前缀来标识该内容是一个加密值,当客户端加载时自动进行解密
#使用前提:1.java8 151之前的必须从Oracle官网下载不限长度JCE版本,解压覆盖到$JAVA_HOME/jre/lib/security或$JRE_HOME/lib/security目录下,重启JVM
#java8 151以上需要修改该目录下java.security文件将crypto.policy改成unlimited,重启JVM,java8 161以上已经不再限制密钥长度
#2.对称加密:必须在bootstrap.*中配置对称秘钥encrypt.key属性,否则无效,也可以使用环境变量ENCRYPT_KEY进行配置,提高安全性
#3.非对称加密:必须在bootstrap.*中配置秘钥库encrypt.key-store.*属性,否则无效,也可以使用环境变量ENCRYPT_KEY_STORE_*进行配置,提高安全性
#可以使用/encrypt/status端点查看加密功能状态,/key查看秘钥,/encrypt对POST请求BODY进行加密,/decrypt对POST请求BODY进行解密
#如果通过浏览器访问/encrypt端点必须禁用跨源请求,springboot2.0以上只能通过提供实现WebSecurityConfigurer类对象来配置,建议使用curl工具访问
spring.datasource.name=didi
#对称加密
#spring.datasource.password={cipher}ffbe8fb7a52eccae7900143513b7cc0b0e1c9f56e32159a702efe59dc550d20f
#非对称加密
spring.datasource.password={cipher}AQAoUz8FL8ZFJYdU1cEMyem5ZmHIQS9w5dDACUr8GhndwJrDogNOpmjNKp1jN7lbp8cjcqmprlOatlFWHHuJ2Q2a9wq6VaD399yOido/lWnR557rjOlVgaBKgscbLMeRBX47ggXf8ZwuCt4yna5OAvM+YZ63/6cW7TCa4TITzP9eODvcj5IZG6SXlWgAh13HdmSaLCjXY0OeYCG+bOEcYt7Vmo6Lc/YgiBtMeYB0gqahQ2Dhh0YenmxcO/oybbnFKVSH6yhOl5kRZEr1KTay6SRBHpFloUQbbmhR12BhBoOpdKOH5GhS+3MxeyCUFU4ETgkNL3i5xkgZSITx4UCBPTTNbfUG8YQa4nTYnSAbma5XsOp9d/7eT/HfWXXGqEpabMQ=

#十一、高可用配置:1.传统模式,将所有ConfigServer指向同一个 Git仓库,客户端在指定ConfigServer位置时,只需指定ConfigServer上层负载均衡设备地址即可
#2.服务模式:将ConfigServer作为一个普通微服务应用,客户端使用配置中心服务名获取配置信息,实现了高可用和自维护

eureka.client.serviceUrl.defaultZone=http://localhost:1111/eureka/

